<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Chris Wiki</title>
    <link>http://christh0x.github.io/docs/wiki/research/java/</link>
    <description>Recent content in java on Chris Wiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://christh0x.github.io/docs/wiki/research/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HotSpot是什么？</title>
      <link>http://christh0x.github.io/docs/wiki/research/java/hotspot%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://christh0x.github.io/docs/wiki/research/java/hotspot%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>1. HotSpot历史 # SUN的JDK版本从1.3.1开始运用HotSpot虚拟机， 2006年底开源，主要使用C++实现，JNI接口部分用C实现。
HotSpot是较新的Java虚拟机，用来代替JIT(Just in Time)，可以大大提高Java运行的性能。
Java原先是把源代码编译为字节码在虚拟机执行，这样执行速度较慢。而HotSpot将常用的部分代码编译为本地(原生，native)代码，这样显着提高了性能。
HotSpot JVM 参数可以分为规则参数(standard options)和非规则参数(non-standard options)。
规则参数相对稳定，在JDK未来的版本里不会有太大的改动。
非规则参数则有因升级JDK而改动的可能。
规则和非规则参数这里不做介绍了，网上资料很多。
2. HotSpot基础知识 # HotSpot包括一个解释器和两个编译器（client 和 server，二选一的），解释与编译混合执行模式，默认启动解释执行。
编译器：java源代码被编译器编译成class文件（字节码），java字节码在运行时可以被动态编译（JIT）成本地代码(前提是解释与编译混合执行模式且虚拟机不是刚启动时)。
解释器： 解释器用来解释class文件（字节码），java是解释语言（书上这么说的）。
server启动慢，占用内存多，执行效率高，适用于服务器端应用；
client启动快，占用内存小，执行效率没有server快，默认情况下不进行动态编译，适用于桌面应用程序。
由-XX:+RewriteFrequentPairs参数控制 client模式默认关闭，server模式默认开启
在jre安装目录下的lib/i386/jvm.cfg 文件下。
java -version Java HotSpot(TM) Client VM (build 14.3-b01, mixed mode, sharing), mixed mode 解释与编译 混合的执行模式 默认使用这种模式
java -Xint -version Java HotSpot(TM) Client VM (build 14.3-b01, interpreted mode, sharing), interpreted 纯解释模式 禁用JIT编译
java -Xcomp -version Java HotSpot(TM) Client VM (build 14.</description>
    </item>
    
    <item>
      <title>Arthas 使用</title>
      <link>http://christh0x.github.io/docs/wiki/research/java/arthas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://christh0x.github.io/docs/wiki/research/java/arthas/</guid>
      <description>java -jar arthas-boot.jar
# 反编译代码 jad --source-only com.xxx.xxx.Xxx jad --source-only com.xxx.xxx.Xxx &amp;gt; com.xxx.xxx.Xxx.java # 查看bean成员变量 ognl &amp;#39;@com.xxx.utils.SpringUtils@getBean(&amp;#34;beanName&amp;#34;).propertyName&amp;#39; # 若未加载SpringUtils类 # 先查看SpringUtils类hash sc -d com.xxx.utils.SpringUtils # 指定hash加载 ognl -c 22f71333 &amp;#39;@com.xxx.utils.SpringUtils@getBean(&amp;#34;beanName&amp;#34;).propertyName&amp;#39; ## 热修改class # 注: 不能增减成员变量和方法, 只能修改代码段 redefine /tmp/Xxx.class References # 如何使用Arthas查看类变量值
Arthas不停机热修改代码
arthas 执行ognl表达式ClassNotFoundException</description>
    </item>
    
    <item>
      <title>Jar包操作</title>
      <link>http://christh0x.github.io/docs/wiki/research/java/jar%E5%8C%85%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://christh0x.github.io/docs/wiki/research/java/jar%E5%8C%85%E6%93%8D%E4%BD%9C/</guid>
      <description> 解压 # jar -xvf xxx.jar 压缩 # jar -cvf0m xxx.jar . 修改 # 注: 待修改的文件必须和jar包内目录一致
jar -uvf xxx.jar path/to/file.class References # </description>
    </item>
    
    <item>
      <title>保持顺序的Properties类</title>
      <link>http://christh0x.github.io/docs/wiki/research/java/%E4%BF%9D%E6%8C%81%E9%A1%BA%E5%BA%8F%E7%9A%84properties%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://christh0x.github.io/docs/wiki/research/java/%E4%BF%9D%E6%8C%81%E9%A1%BA%E5%BA%8F%E7%9A%84properties%E7%B1%BB/</guid>
      <description>保持顺序的Properties类 # Java 的 Properties 加载属性文件后是无法保证输出的顺序与文件中一致的，因为 Properties 是继承自 Hashtable 的， key/value 都是直接存在 Hashtable 中的，而 Hashtable 是不保证进出顺序的。
总有时候会有关心顺序一致的需求，恰如有 org.apache.commons.collections.OrderdMap（其实用 LinkedHashMap 就是保证顺序） 一样，我们也想要有个 OrderdProperties。
只要继承自 Properties，覆盖原来的 put/keys,keySet,stringPropertyNames 即可，其中用一个 LinkedHashSet 来保存它的所有 key。完整代码如下:
import java.util.Collections; import java.util.Enumeration; import java.util.LinkedHashSet; import java.util.Properties; import java.util.Set; public class OrderedProperties extends Properties { private static final long serialVersionUID = -4627607243846121965L; private final LinkedHashSet&amp;lt;Object&amp;gt; keys = new LinkedHashSet&amp;lt;&amp;gt;(); public Enumeration&amp;lt;Object&amp;gt; keys() { return Collections.&amp;lt;Object&amp;gt; enumeration(keys); } public Object put(Object key, Object value) { keys.</description>
    </item>
    
  </channel>
</rss>
